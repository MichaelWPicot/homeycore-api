// <auto-generated />
using System;
using HomieCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HomieCore.Data.Migrations
{
    [DbContext(typeof(TaskDataContext))]
    [Migration("20230622214611_SeededDataWithJoinTables")]
    partial class SeededDataWithJoinTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupTask", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("TasksId")
                        .HasColumnType("integer");

                    b.HasKey("GroupsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("GroupTask");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("HomieCore.Data.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupDescription = "Wasted Potential",
                            GroupName = "Night's Watch",
                            LastModifiedTime = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(135)
                        },
                        new
                        {
                            Id = 2,
                            GroupDescription = "PC Port Is Going To Take So Long",
                            GroupName = "Rosaria Nobels",
                            LastModifiedTime = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(137)
                        });
                });

            modelBuilder.Entity("HomieCore.Data.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CompleteByDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TaskCreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedUserId = 2,
                            CompleteByDate = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(150),
                            CreatedUserId = 1,
                            LastModifiedDateTime = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(151),
                            TaskCreatedDate = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(150),
                            TaskDescription = "You know Nuthin Jon Snow",
                            TaskName = "Free The North"
                        },
                        new
                        {
                            Id = 2,
                            AssignedUserId = 1,
                            CompleteByDate = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(153),
                            CreatedUserId = 2,
                            LastModifiedDateTime = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(153),
                            TaskCreatedDate = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(153),
                            TaskDescription = "Will That Really Solve Anything?",
                            TaskName = "Get Revenge"
                        });
                });

            modelBuilder.Entity("HomieCore.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Jon",
                            LastModifiedDateTime = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(35),
                            LastName = "Snow"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Clive",
                            LastModifiedDateTime = new DateTime(2023, 6, 22, 21, 46, 10, 940, DateTimeKind.Utc).AddTicks(37),
                            LastName = "Rosfield"
                        });
                });

            modelBuilder.Entity("GroupTask", b =>
                {
                    b.HasOne("HomieCore.Data.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomieCore.Data.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("HomieCore.Data.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomieCore.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomieCore.Data.Task", b =>
                {
                    b.HasOne("HomieCore.Data.User", "AssignedUser")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("HomieCore.Data.User", "CreatedUser")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("CreatedUserId");

                    b.Navigation("AssignedUser");

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("HomieCore.Data.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("CreatedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
